[
    {
        "team": "A_Team",
        "code": "class Solution {\n    public int reverse(int x) {\n        int reversed = 0;\n        while (x != 0) {\n            int pop = x % 10;\n            x /= 10;\n            if (reversed > Integer.MAX_VALUE / 10 || (reversed == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\n            if (reversed < Integer.MIN_VALUE / 10 || (reversed == Integer.MIN_VALUE / 10 && pop < -8)) return 0;\n            reversed = reversed * 10 + pop;\n        }\n        return reversed;\n    }\n}",
        "status": "solved",
        "summary": "The code reverses an integer digit by digit. It handles potential overflow issues by checking if the intermediate reversed value is close to the maximum or minimum integer values before appending the next digit.",
        "time_complexity": "O(log(x))",
        "space_complexity": "O(1)"
    },
    {
        "team": "B_Team",
        "code": "class Solution {\n    public int reverse(int x) {\n        int reversed = 0;\n        while (x != 0) {\n            int digit = x % 10;\n            x /= 10;\n\n            if (reversed > Integer.MAX_VALUE / 10 || (reversed == Integer.MAX_VALUE / 10 && digit > 7)) {\n                return 0;\n            }\n            if (reversed < Integer.MIN_VALUE / 10 || (reversed == Integer.MIN_VALUE / 10 && digit < -8)) {\n                return 0;\n            }\n\n            reversed = reversed * 10 + digit;\n        }\n        return reversed;\n    }\n}",
        "status": "solved",
        "summary": "The code reverses an integer by extracting digits and rebuilding the reversed number. Overflow is checked before each digit addition to ensure the result stays within the integer range.",
        "time_complexity": "O(log(abs(x)))",
        "space_complexity": "O(1)"
    },
    {
        "team": "C_Team",
        "code": "class Solution {\n    public int reverse(int x) {\n        int reversed = 0;\n        while (x != 0) {\n            int digit = x % 10;\n            x /= 10;\n\n            if (reversed > Integer.MAX_VALUE / 10 || (reversed == Integer.MAX_VALUE / 10 && digit > 7)) return 0;\n            if (reversed < Integer.MIN_VALUE / 10 || (reversed == Integer.MIN_VALUE / 10 && digit < -8)) return 0;\n\n            reversed = reversed * 10 + digit;\n        }\n        return reversed;\n    }\n}",
        "status": "solved",
        "summary": "The integer is reversed digit by digit. Overflow is checked before each digit is added to the reversed number to prevent integer overflow.",
        "time_complexity": "O(log10(abs(x)))",
        "space_complexity": "O(1)"
    }
]