[
    {
        "team": "A_Team",
        "code": "import java.util.HashMap;\nimport java.util.Map;\n\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> numMap = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if (numMap.containsKey(complement)) {\n                return new int[] { numMap.get(complement), i };\n            }\n            numMap.put(nums[i], i);\n        }\n        return new int[] {}; // Should not happen as per the problem statement\n    }\n}",
        "status": "solved",
        "summary": "Uses a HashMap to store each number and its index. For each number, it checks if the complement (target - number) exists in the map. If it does, it returns the indices of the number and its complement.",
        "time_complexity": "O(n)",
        "space_complexity": "O(n)"
    },
    {
        "team": "B_Team",
        "code": "import java.util.HashMap;\nimport java.util.Map;\n\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> numMap = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if (numMap.containsKey(complement)) {\n                return new int[] {numMap.get(complement), i};\n            }\n            numMap.put(nums[i], i);\n        }\n        return new int[] {}; // Should never happen, given the problem constraints\n    }\n}",
        "status": "solved",
        "summary": "This code uses a HashMap to find two numbers in an array that add up to a target value. It iterates through the array, storing each number and its index in the map. For each number, it checks if the complement exists in the map, and if so, returns the indices.",
        "time_complexity": "O(n)",
        "space_complexity": "O(n)"
    },
    {
        "team": "C_Team",
        "code": "import java.util.HashMap;\nimport java.util.Map;\n\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> numMap = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if (numMap.containsKey(complement)) {\n                return new int[] {numMap.get(complement), i };\n            }\n            numMap.put(nums[i], i);\n        }\n        return new int[] {}; // Should never happen as problem guarantees a solution\n    }\n}",
        "status": "solved",
        "summary": "The algorithm utilizes a HashMap to store each number's value and index. It iterates through the array, and for each number, it checks if its complement (target - number) exists in the HashMap. If found, it returns the indices of the two numbers.",
        "time_complexity": "O(n)",
        "space_complexity": "O(n)"
    }
]